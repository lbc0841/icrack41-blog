---
import MainNavigation from '../components/MainNavigation.astro';
import Layout from '../layouts/Layout.astro';

import "../styles/about.css";
import "../styles/anim.css";

import { Image } from 'astro:assets';
import profileImg from '../assets/profile_img.webp';

import MySelfIntro from "../components/about/MySelfIntro.astro";
import MySkillTree from "../components/about/MySkillTree.astro";
import MyAbility from "../components/about/MyAbility.astro";
import MyNowAndFutrue from "../components/about/MyNowAndFutrue.astro";
import FindMe from "../components/about/FindMe.astro";

const youtubeLink = "https://space.bilibili.com/3494375061457383?spm_id_from=333.1007.0.0";
const bilibiliLink = "https://youtube.com/@lbc0841?si=0sn28TYgzdA0UpWU";
const gmailLink = "";
const instagramLink = "https://www.instagram.com/lbc0841/";
---


<Layout>
	<div class="background opacity-30"></div>
	
	<MainNavigation/>
	
	<div class="about-me-container">
		<div class="profile-bar">
			<div class="profile-container">
		
				<div class="profile-img">
					<Image class="profile-img" src={profileImg} alt="profile-img" style="border: solid 2px #7f91b1;"/>
				</div>
				
				<h3 class="profile-name">small D</h3>
	
				<ul class="profile-links">
					<li><a href={bilibiliLink} style="color: rgb(0,174,231);"><i class="fa-brands fa-bilibili"></i></a></li>
					<li><a href={youtubeLink} style="color: rgb(255,0,51);"><i class="fa-brands fa-youtube"></i></a></li>
					<li><a href={gmailLink} style="color: rgb(249,181,0);"><i class="fa-regular fa-envelope"></i></a></li>
					<li><a href={instagramLink} style="color: rgb(99,230,190);"><i class="fa-brands fa-instagram"></i></a></li>
				</ul>
			</div>
	
			<div class="contents-table">
				<div class="text-xl font-bold" style="color: rgba(200, 200, 200, 0.7); margin-bottom: 12px;">
					<i class="fa-solid fa-tags"></i>
					Tags
				</div>
		
				<ul>
					<li><button onclick="scrollToElement('contents-container', 'my-self-intro')">關於我</button></li>
					<li><button onclick="scrollToElement('contents-container', 'my-skill-tree')">技能樹</button></li>
					<li><button onclick="scrollToElement('contents-container', 'my-ability')">編程能力</button></li>
					<li><button onclick="scrollToElement('contents-container', 'now-and-futrue')">現在 & 未來</button></li>
					<li><button onclick="scrollToElement('contents-container', 'find-me')">找到我</button></li>
				</ul>
			</div>
		</div>
	
		<div id="contents-container" class="contents-container">
			<div class="w-full h-full">
				<!-- <div style="height: 70px;"></div> -->
				
				<div id="my-self-intro"><MySelfIntro/></div>
				<div id="my-skill-tree"><MySkillTree/></div>
				<div id="my-ability"><MyAbility/></div>
				<div id="now-and-futrue"><MyNowAndFutrue/></div>
				<div id="find-me"><FindMe/></div>
	
			</div>
		</div>
	</div>

	<script is:browser>
		function scrollToElement(containerId, elementId)
		{
			const container = document.getElementById(containerId);
	
			const containerTop = document.getElementById(containerId).getBoundingClientRect().top;
			const elementTop = document.getElementById(elementId).getBoundingClientRect().top;
			const scrollOffset = containerTop - elementTop + 70;
	
			if(container)
			{
				container.scrollTo({ 
					top: container.scrollTop - scrollOffset,
					behavior: 'smooth',
					
				});
				// container.scrollTop = element.offsetTop - container.offsetTop;
			}
		}

		const enteringRoute = document.querySelector('.route .route-path');
		const enteringProgress = document.querySelectorAll('.entering-progress');
		const enteringTexts = document.querySelectorAll('.entering-text');

		const enteringTextObserver = new IntersectionObserver((entrise) => {
			entrise.forEach(entry => {
				if(entry.isIntersecting){
					entry.target.style.animation = "anim-entering-text 0.3s ease-out";
					entry.target.style.visibility = "visible";
				}
				else{
					entry.target.style.animation = "none";
					entry.target.style.visibility = "hidden";
				}
			});
		},
		{
			threshold: 0.15
		});

		const enteringRouteObserver = new IntersectionObserver((entrise) => {
			entrise.forEach(entry => {
				if(entry.isIntersecting){
					entry.target.style.animation = "anim-entering-route 1s ease-out";
					entry.target.style.visibility = "visible";
				}
				else{
					entry.target.style.animation = "none";
					entry.target.style.visibility = "hidden";
				}
			});
		},
		{
			threshold: 0.4
		});

		const enteringProgressObserver = new IntersectionObserver((entrise) => {
			entrise.forEach(entry => {
				if(entry.isIntersecting){
					entry.target.style.animation = "anim-entering-progress 0.3s ease-out";
					entry.target.style.visibility = "visible";
				}
				else{
					entry.target.style.animation = "none";
					entry.target.style.visibility = "hidden";
				}
			});
		},
		{
			threshold: 0.4
		});

		enteringTexts.forEach(item => {
			enteringTextObserver.observe(item);
		});
		
		enteringProgress.forEach(item => {
			enteringProgressObserver.observe(item);
		});

		enteringRouteObserver.observe(enteringRoute);


	</script>
</Layout>



